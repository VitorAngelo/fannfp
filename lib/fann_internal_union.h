// FLOATFANN for ARM FP16 native format:

#define fann_bp_max(x,y) ((((x).f) > ((y).f)) ? (x) : (y))
#define fann_ff_max(x,y) fann_bp_max((x),(y))
#define fann_bp_min(x,y) ((((x).f) < ((y).f)) ? (x) : (y))
#define fann_ff_min(x,y) fann_bp_min((x),(y)) 
#define fann_bp_mul(x,y) ({fann_type_bp ret; ret.f = ((x).f)*((y).f); ret;})
#define fann_ff_mul(x,y) ({fann_type_ff ret; ret.f = ((x).f)*((y).f); ret;})
//#define fann_bp_div(x,y) ({fann_type_bp ret; ret.f = ((x).f)/((y).f); ret;})
#define fann_ff_div(x,y) ({fann_type_ff ret; ret.f = ((x).f)/((y).f); ret;})
#define fann_bp_add(x,y) ({fann_type_bp ret; ret.f = ((x).f)+((y).f); ret;})
#define fann_ff_add(x,y) ({fann_type_ff ret; ret.f = ((x).f)+((y).f); ret;})
#define fann_bp_sub(x,y) ({fann_type_bp ret; ret.f = ((x).f)-((y).f); ret;})
#define fann_ff_sub(x,y) ({fann_type_ff ret; ret.f = ((x).f)-((y).f); ret;})
#define fann_bp_mac(x,y,c) ({fann_type_bp ret; ret.f = (c).f; ret.f+=(((x).f)*((y).f)); ret;})
#define fann_ff_mac(x,y,c) ({fann_type_ff ret; ret.f = (c).f; ret.f+=(((x).f)*((y).f)); ret;})

#define fann_int_to_bp(i) ({fann_type_bp ret; ret.f = (i); ret;})
#define fann_int_to_ff(i) ({fann_type_ff ret; ret.f = (i); ret;})
#define fann_float_to_bp(fp) ({fann_type_bp ret; ret.f = (fp); ret;})
#define fann_float_to_ff(fp) ({fann_type_ff ret; ret.f = (fp); ret;})
//#define fann_bp_to_int(w, b) ((int)((w).f))
//#define fann_ff_to_int(w) ((int)((w).f))

#define fann_bp_to_float(w) ((float)((w).f))
#define fann_ff_to_float(w) ((float)((w).f))

#define fann_ff_to_bp(ff) ({fann_type_bp ret; ret.f = (ff).f; ret;})
#define fann_bp_to_ff(bp) ({fann_type_ff ret; ret.f = (bp).f; ret;})
#define fann_bp_to_bp(bp, bias) ({fann_type_bp ret; ret.f = (bp).f; ret;})

#define fann_bp_abs(val) ({fann_type_bp ret; ret.f = fabsf((val).f); ret;})
#define fann_ff_abs(val) ({fann_type_ff ret; ret.f = fabsf((val).f); ret;})
#define fann_bp_neg(val) ({fann_type_bp ret; ret.f = -((val).f); ret;})
#define fann_ff_neg(val) ({fann_type_bp ret; ret.f = -((val).f); ret;})
#define fann_ff_clip(x, lo, hi) ((((x).f) < ((lo).f)) ? (lo) : ((((x).f) > ((hi).f)) ? (hi) : (x)))
#define fann_bp_clip(x,y,z) fann_ff_clip((x),(y),(z))
#define fann_bp_lt(x,y) (((x).f)<((y).f))
#define fann_ff_lt(x,y) (((x).f)<((y).f))
#define fann_bp_ne(x,y) (((x).f)!=((y).f))
#define fann_ff_ne(x,y) (((x).f)!=((y).f))
#define fann_bp_gt(x,y) (((x).f)>((y).f))
#define fann_ff_gt(x,y) (((x).f)>((y).f)) 
#define fann_bp_is_neg(x) (((x).f)<0.0)
#define fann_ff_is_neg(x) (((x).f)<0.0)
#define fann_bp_is_pos(x) (((x).f)>0.0)
#define fann_ff_is_pos(x) (((x).f)>0.0)
#define fann_bp_is_non_zero(x) (((x).f)!=0.0)
#define fann_ff_is_non_zero(x) (((x).f)!=0.0)
#define fann_bp_is_zero(x) (((x).f)==0.0)
#define fann_ff_is_zero(x) (((x).f)==0.0)

// native type for temporary calculations:
#define NT_0000                     0.0
#define fann_float_to_nt(x)         ((x))
#define fann_nt_to_float(x)         ((x))
#define fann_ff_to_nt(x)            fann_ff_to_float((x))
#define fann_nt_to_ff(x)            fann_float_to_ff((x))
#define fann_nt_is_zero(x)          ((x)==0.0)
#define fann_nt_neg(x)              (-(x))
#define fann_nt_gt(x, y)            ((x) > (y))
#define fann_nt_lt(x, y)            ((x) < (y))
#define fann_nt_add(x, y)           ((x) + (y))
#define fann_nt_sub(x, y)           ((x) - (y))
#define fann_nt_mul(x, y)           ((x) * (y))
#define fann_nt_div(x, y)           ((x) / (y))
#define fann_nt_mac(x, y, c)        ((x) * (y) + (c))


